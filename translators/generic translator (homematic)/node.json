[
    {
        "id": "b85c285e.bbe608",
        "type": "function",
        "z": "9d52d40a.a63668",
        "name": "translate homematic",
        "func": "const never=0;\nconst onChange=1;\nconst allways=2;\n\n// -----------------------------------------------------------------\n// example of a generic translator for msg.objects into state values\n//\n// this is WORK IN PROGRESS!\n// share improvements if you think they can be usefull to others\n//\n// -----------------------------------------------------------------\n\nvar translator={\n    \"$topic\":{\"properties\":[\"deviceType\",\"device\"],\"requited\":true,\"send\":allways},\n    \"$name\":{\"property\":\"deviceName\",\"default\":\"\",\"format\":\"\",\"requited\":true,\"send\":allways},\n    \"$state\":{\"property\":\"\",\"default\":\"ready\",\"format\":\"\",\"requited\":false,\"send\":allways},\n    \"$localip\":{\"property\":\"ccu\",\"default\":\"127.0.0.1\",\"format\":\"\",\"requited\":false,\"send\":onChange},\n    \"$mac\":{\"property\":\"\",\"default\":\"FF:FF:FF:FF:FF:FF\",\"format\":\"\",\"requited\":false,\"send\":never},\n    \"$implementation\":{\"property\":\"\",\"default\":\"Homematic\",\"format\":\"\",\"requited\":false,\"send\":onChange},\n    \"$nodes\":{\"property\":\"\",\"default\":[],\"format\":\"\",\"requited\":false,\"send\":never},\n    \"uptime\":{\"property\":\"\",\"default\":0,\"format\":\"\",\"requited\":false,\"send\":never},\n    \"interval\":[\n        {\"property\":\"deviceType=HM-RCV-50\",\"value\":\"\",\"default\":0,\"format\":\"\",\"requited\":false,\"send\":allways},\n        {\"property\":\"deviceType=HM-CC-RT-DN\",\"value\":\"\",\"default\":1200,\"format\":\"\",\"requited\":false,\"send\":allways},\n        {\"property\":\"deviceType=HM-WDS30-OT2-SM\",\"value\":\"\",\"default\":1800,\"format\":\"\",\"requited\":false,\"send\":allways},\n        {\"property\":\"deviceType=HMIP-PSM\",\"value\":\"\",\"default\":600,\"format\":\"\",\"requited\":false,\"send\":allways},\n        {\"property\":\"deviceType=HMIP-PS\",\"value\":\"\",\"default\":0,\"format\":\"\",\"requited\":false,\"send\":allways},\n        {\"property\":\"deviceType=HM-Sec-SCo\",\"value\":\"\",\"default\":0,\"format\":\"\",\"requited\":false,\"send\":allways}\n    ],\n    \"freeheap\":{\"property\":\"\",\"default\":0,\"format\":\"\",\"requited\":false,\"send\":never},\n    \"cpuload\":{\"property\":\"\",\"default\":0,\"format\":\"\",\"requited\":false,\"send\":never},\n    \"battery\":[\n        {\"property\":\"datapoint=BATTERY_STATE\",\"value\":\"value\",\"default\":0,\"format\":\"1.5:3.1\",\"translate\":\"%\",\"requited\":false,\"send\":allways},\n        {\"property\":\"datapoint=LOWBAT\",\"value\":\"value\",\"default\":false,\"format\":\"true:false\",\"translate\":\"%\",\"requited\":false,\"send\":allways}\n    ],\n    \"supply\":{\"property\":\"datapoint=BATTERY_STATE\",\"value\":\"value\",\"default\":0,\"format\":\"1.5:4.6\",\"requited\":false,\"send\":allways},\n    \"signal\":{\"property\":\"RSSI_PEER\",\"default\":0,\"format\":\"0:100\",\"requited\":false,\"send\":allways},\n    \"name\":{\"property\":\"deviceType\",\"default\":\"Homematic\",\"format\":\"\",\"requited\":false,\"send\":onChange},\n    \"version\":{\"property\":\"iface\",\"default\":\"0.0.1\",\"format\":\"\",\"requited\":false,\"send\":onChange},\n    \"room\":{\"property\":\"room\",\"default\":\"\",\"format\":\"\",\"requited\":false,\"send\":onChange}\n}\n\nvar status = {fill:\"red\",shape:\"dot\",text: \"payload=\"+msg.payload};\nvar getValue = function (theMsg,property) {\n    if (typeof property === \"string\") {\n        var splitted = property.split('.');\n        for (let currentObject of splitted) {\n            if (theMsg.hasOwnProperty(currentObject)) {\n                theMsg=theMsg[currentObject];\n            } else {\n                return undefined;\n            }\n        }\n        return theMsg;\n    } else node.error(\"[translate] property:'\"+property+\"' not a string\");\n}\n\nvar currentProperty = {};\nvar value;\nvar sendStore=context.get(\"sendStore\") || {};\nvar index;\n\nif (!msg.hasOwnProperty(\"state\")) msg.state={};\nfor (let property in translator) {\n    if (translator.hasOwnProperty(property)) {\n        properties = (Array.isArray(translator[property])) ? translator[property] : [translator[property]]\n        for (currentProperty of properties) {\n            if (property===\"$topic\" && (Array.isArray(currentProperty.properties))) {\n                msg.state[property]=\"\"\n                for (let element of currentProperty.properties) {\n                    value = getValue(msg,element);\n                    if (value !== undefined) msg.state[property]+=value;\n                }\n                index=msg.state[property];\n            } else {\n                if (currentProperty.hasOwnProperty(\"property\")) {\n                    if (currentProperty.property!==\"\") {\n                        \n                        // if there is a conditional property defined\n                        if (currentProperty.property.includes(\"=\")) {\n                            //node.warn([currentProperty.property,typeof currentProperty.property]);\n                            let propertySplitted=currentProperty.property.split(\"=\");\n                            if (getValue(msg,propertySplitted[0])===propertySplitted[1]) {\n                                if (currentProperty.translate===\"%\") { // if Translator for %\n                                    let formatSplitted=currentProperty.format.split(\":\");\n                                    if (formatSplitted[0]===\"true\" || formatSplitted[0]===\"false\") {\n                                        let min=(formatSplitted[0]===\"true\") ? true : false;\n                                        if (getValue(msg,currentProperty.value)===min) { // set % values for boolean values\n                                            msg.state[property]=25;\n                                        } else {\n                                            msg.state[property]=75;\n                                        }\n                                    } else {\n                                        // rescale percentage to given format \"min:max\"\n                                        let min=Number(formatSplitted[0]);\n                                        let max=Number(formatSplitted[1]);\n                                        msg.state[property]=Math.floor(100/(max-min)*(Number(getValue(msg,currentProperty.value))-min));\n                                    }\n                                } else {\n                                    if (currentProperty.value!==\"\") {\n                                        msg.state[property]=getValue(msg,currentProperty.value);\n                                    } else {\n                                        msg.state[property]=currentProperty.default;\n                                    }\n                                }\n                            }\n                        } else {\n                            if (currentProperty.property!=='') {\n                                msg.state[property]=getValue(msg,currentProperty.property);\n                            } else {\n                                msg.state[property]=currentProperty.default;\n                            }\n                        }\n                    } else {\n                        msg.state[property]=currentProperty.default;\n                    }\n                    if (currentProperty.send===onChange) {\n                        if (!sendStore.hasOwnProperty(index)) sendStore[index]={};\n                        if (!sendStore[index].hasOwnProperty(property) || sendStore[index][property]===null) {\n                            sendStore[index][property]=msg.state[property];\n                            context.set(\"sendStore\",sendStore);\n                        } else {\n                            if (sendStore[index][property]===msg.state[property]) {\n                                // node.warn([\"delete onChange\",index,property,sendStore[index],sendStore[index].hasOwnProperty(property),sendStore[index][property]]);\n                                delete msg.state[property]\n                            } else {\n                                sendStore[index][property]=msg.state[property];\n                            }\n                        }\n                    } \n                    if (currentProperty.send===never) {\n                        delete msg.state[property]\n                    }\n                }\n                if (property===\"$name\") {\n                    status.fill=\"green\";\n                    status.text=msg.state[property]+\"=\"+msg.state[property];\n                }\n            }\n            if (currentProperty.required && !msg.state.hasOwnProperty(property)) {\n                status.text=\"required \"+property+\" \"+msg.state[property];\n            }\n        }\n    }\n}\n// check if required attributes exists\nfor (let property in translator) {\n    if (translator[property].required) { // if any requitred property is missing dispose complete msg.state\n        if (!msg.state.hasOwnProperty(property)) {\n            node.warn([property+\" undefined\",msg.payload]);\n            status.fill=\"red\";\n            status.text=\"required \"+property+\" undefined\";\n            delete msg.state;\n            break;\n        }\n    }\n}\nmsg.topic=msg.state.$topic;\nnode.status(status);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 372,
        "y": 612,
        "wires": [
            [
                "b4f3194a.c9e198",
                "5ec354ef.9218cc"
            ]
        ],
        "info": "# generic translator (here for Homematic devices)\n\nThis function node is a generic translator for data comming in as a msg object. As an example the converting data from the homematic in node to msg.state is performed.\n\n## theory of operation\n\nThe remote device table originates in the [homie convention](https://homieiot.github.io) but can be relatively easyly adapted for other systems. If ever possible the data from other systems should be merged into the homie convention properties to keep the amount of columns in the table low and make it easy to be compared, sorted and filtered. But feel free to add additional proerties as you like. Some properties a essential and should not be changed\n\n** required properties **\n- **$topic** essential is a unique index. Unique in this case means unique for ALL remote devices. Otherwise you will get different devices merged into each other. `msg.state.$topic` will be copied into msg.topic to make it easier to access\n- **$name** should be unique and will be inside one mqtt base topic but as every row is identified by $topic it could be edited.\n- **$state** current or last known state of the device | string | [\"ready\", \"lost\", \"init\", \"sleeping\", \"disconnected\", \"alert\"\n\n** special properties **\n\n- **interval** If your device do not provide the inteval ime (on seconds) it could be expected to send updates you should set the fefault to an apropiate time. The `$state watchdog` uses this to set a individual timeout for each device. Set it to 0 when you do not expect regular updates.\n \n## suggested / reserved properties\n\nThis properties are defined by the homie convention and should be used if possible!\n\nproperty | description | type    | format \n-------- | ----------- | ------- | ------ \n$homie | The implemented Homie convention version | **string** | \"4.0.0\"\n$name | the **unique** name of the device. This name is used to identify the device in the table. | string | \"myDevice\"\n$state | current or last state of the device | string | [\"ready\", \"lost\", \"init\", \"sleeping\", \"disconnected\", \"alert\"]\n$nodes\t| Nodes the device exposes | array | comma seperated list\n$extensions\t| Supported extensions | array | comma seperated list\n$implementation | An identifier for the Homie implementation | string | \"esp8266\"\n\n\n\ndefined by [**Legacy Firmware**](https://github.com/homieiot/convention/blob/develop/extensions/documents/homie_legacy_firmware_extension.md)\n\nproperty | description | type    | format\n-------- | ----------- | ------- | ------\n$localip | IP of the device on the local network | string | \"127.0.0.1\"\n$mac | Mac address of the device network interface | string | The format MUST be of the type `A1:B2:C3:D4:E5:F6`\nname | Name of the firmware running on the device. | string | Allowed characters are the same as the device ID\nversion | Version of the firmware running on the device. | string | \"1.0.0\"\n\n\ndefined by [**Legacy Stats**](https://github.com/homieiot/convention/blob/develop/extensions/documents/homie_legacy_stats_extension.md)\n\nproperty | description | type    | format\n-------- | ----------- | ------- | ------\ninterval | Interval in seconds at which the device refreshes its `$stats/+` | integer | Positive greater 0\nuptime | Time elapsed in seconds since the boot of the device | integer | seconds\nsignal | Signal strength | Integer | in %\ncputemp | CPU Temperature | Float | in °C\ncpuload | CPU Load in. Average of last $stats\\interval including all CPUs | Integer | %. \nbattery | Battery level. | Integer | in %\nfreeheap | Free heap. |\tPositive Integer | in bytes\nsupply | Supply Voltage | Float | in V\n\n"
    }
]